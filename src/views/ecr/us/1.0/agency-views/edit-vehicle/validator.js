const {
    defaultConfig: { PLATFORM, LOCATION }
} = require(`../../../../../../config/default`);

const { STRINGS } = require(`../../../../../../shared/${PLATFORM}/constants/${LOCATION}/strings`);
const { VALIDATION_MESSAGES, EMAIL_REGX, PASSWORD_LENGTH } = require(`../../../../../../shared/${PLATFORM}/constants`)

const validator = (values) => {
    const latestYear = new Date()
    const errors = {};

    if (!values[STRINGS.VEHICLE_TYPE_NAME]) {
        errors[STRINGS.VEHICLE_TYPE_NAME] = VALIDATION_MESSAGES.ENTER_VEHICLE_TYPE_REQUIRED
    }
    if (!values[STRINGS.VEHICLE_NAME_NAME]) {
        errors[STRINGS.VEHICLE_NAME_NAME] = VALIDATION_MESSAGES.ENTER_VEHICLE_NAME
    }
    // airConditionType
    if (!values[STRINGS.VEHICLE_DESCRIPTION_NAME]) {
        errors[STRINGS.VEHICLE_DESCRIPTION_NAME] = VALIDATION_MESSAGES.ENTER_VEHICLE_DESCRIPTION_REQUIRED
    }

    if (!values[STRINGS.VEHICLE_CODE_NAME]) {
        errors[STRINGS.VEHICLE_CODE_NAME] = VALIDATION_MESSAGES.ENTER_VEHICLE_CODE_REQUIRED
    }

    if (!values[STRINGS.SMALL_LUGGAGE_NAME]) {
        errors[STRINGS.SMALL_LUGGAGE_NAME] = VALIDATION_MESSAGES.ENTER_SMALL_LUGGAGE_REQUIRED
    }

    if (values[STRINGS.SMALL_LUGGAGE_NAME] && (values[STRINGS.SMALL_LUGGAGE_NAME] > 25)) {
        errors[STRINGS.SMALL_LUGGAGE_NAME] = VALIDATION_MESSAGES.MAX_UPTO_25
    }
    if (values[STRINGS.ADULT_SEATS_NAME] && (values[STRINGS.ADULT_SEATS_NAME] > 25)) {
        errors[STRINGS.ADULT_SEATS_NAME] = VALIDATION_MESSAGES.MAX_UPTO_25
    }
    if (values[STRINGS.LARGE_LUGGAGE_NAME] && (values[STRINGS.LARGE_LUGGAGE_NAME] > 25)) {
        errors[STRINGS.LARGE_LUGGAGE_NAME] = VALIDATION_MESSAGES.MAX_UPTO_25
    }
    if (!values[STRINGS.ADULT_SEATS_NAME]) {
        errors[STRINGS.ADULT_SEATS_NAME] = VALIDATION_MESSAGES.ENTER_ADULTS_SEATS_REQUIRED
    }
    if (!values[STRINGS.VEHICLE_NAME_NAME]) {
        errors[STRINGS.VEHICLE_NAME_NAME] = VALIDATION_MESSAGES.ENTER_VEHICLE_NAME_REQUIRED
    }
    if (values[STRINGS.CHILD_SEATS_NAME] && (values[STRINGS.CHILD_SEATS_NAME] > 25)) {
        errors[STRINGS.CHILD_SEATS_NAME] = VALIDATION_MESSAGES.MAX_UPTO_25
    }
    if (!values[STRINGS.LARGE_LUGGAGE_NAME]) {
        errors[STRINGS.LARGE_LUGGAGE_NAME] = VALIDATION_MESSAGES.ENTER_LARGE_LUGGAGE_REQUIRED
    }
    if (!values[STRINGS.VEHICLE_TRANSMISSION_NAME]) {
        errors[STRINGS.VEHICLE_TRANSMISSION_NAME] = VALIDATION_MESSAGES.ENTER_TRANSMISSION_TYPE
    }
    if (!values[STRINGS.FUEL_TYPE_NAME]) {
        errors[STRINGS.FUEL_TYPE_NAME] = VALIDATION_MESSAGES.ENTER_FUEL_TYPE_REQUIRED
    }
    if (!values[STRINGS.VEHICLE_CATEGORY_NAME]) {
        errors[STRINGS.VEHICLE_CATEGORY_NAME] = VALIDATION_MESSAGES.ENTER_VEHICLE_CATEGORY_REQUIRED
    }
    if (!values[STRINGS.AIR_CONDITION_TYPE]) {
        errors[STRINGS.AIR_CONDITION_TYPE] = VALIDATION_MESSAGES.ENTER_AIR_CON_REQUIRED
    }
    if (values[STRINGS.NUMBER_OF_DOORS] && (values[STRINGS.NUMBER_OF_DOORS] > 5)) {
        errors[STRINGS.NUMBER_OF_DOORS] = VALIDATION_MESSAGES.MAX_UPTO_5
    }
    if (values[STRINGS.NUMBER_OF_DOORS] && (values[STRINGS.NUMBER_OF_DOORS] < 2)) {
        errors[STRINGS.NUMBER_OF_DOORS] = VALIDATION_MESSAGES.MIN_MUST_2
    }
    if (!values[STRINGS.CHILD_SEATS_NAME]) {
        errors[STRINGS.CHILD_SEATS_NAME] = VALIDATION_MESSAGES.ENTER_CHILD_SEATS_REQUIRED
    }
    if (!values[STRINGS.NUMBER_OF_DOORS]) {
        errors[STRINGS.NUMBER_OF_DOORS] = VALIDATION_MESSAGES.ENTER_DOORS_REQUIRED
    }
    if (!values[STRINGS.VEHICLE_RANGE_FROM]) {
        errors[STRINGS.VEHICLE_RANGE_FROM] = VALIDATION_MESSAGES.ENTER_VEHICLE_RANGE_REQUIRED
    }
    if (!values[STRINGS.VEHICLE_RANGE_To]) {
        errors[STRINGS.VEHICLE_RANGE_To] = VALIDATION_MESSAGES.ENTER_VEHICLE_RANGE_REQUIRED
    }
    if (values[STRINGS.VEHICLE_RANGE_To] && (values[STRINGS.VEHICLE_RANGE_To] > (latestYear.getFullYear() + 1))) {
        errors[STRINGS.VEHICLE_RANGE_To] = VALIDATION_MESSAGES.MAX_EXCEED_VALIDATION
    }

    if (values[STRINGS.VEHICLE_RANGE_To] && (values[STRINGS.VEHICLE_RANGE_To] < 1980)) {
        errors[STRINGS.VEHICLE_RANGE_To] = VALIDATION_MESSAGES.MIN_YEAR_MUST_1980
    }
    if (values[STRINGS.VEHICLE_RANGE_FROM] && (values[STRINGS.VEHICLE_RANGE_FROM] < 1980)) {
        errors[STRINGS.VEHICLE_RANGE_FROM] = VALIDATION_MESSAGES.MIN_YEAR_MUST_1980
    }
    if (values[STRINGS.VEHICLE_RANGE_FROM] && (values[STRINGS.VEHICLE_RANGE_FROM] > (latestYear.getFullYear()))) {
        errors[STRINGS.VEHICLE_RANGE_FROM] = VALIDATION_MESSAGES.VALID_VEHICLE_RANGE_VALIDATION
    }

    if (values[STRINGS.VEHICLE_RANGE_FROM] && (values[STRINGS.VEHICLE_RANGE_FROM] >= values[STRINGS.VEHICLE_RANGE_To])) {
        errors[STRINGS.VEHICLE_RANGE_To] = VALIDATION_MESSAGES.VALID_VEHICLE_RANGE_VALIDATION
    }
    else if (values[STRINGS.VEHICLE_RANGE_To] && (values[STRINGS.VEHICLE_RANGE_To] <= values[STRINGS.VEHICLE_RANGE_FROM])) {
        errors[STRINGS.VEHICLE_RANGE_FROM] = VALIDATION_MESSAGES.VALID_VEHICLE_RANGE_VALIDATION
    }
    return errors;
};

export default validator;
